---
import { getCollection } from 'astro:content';
import IndexPageLayout from "../../layouts/IndexPageLayout.astro";
import RecipeCard from "../../components/RecipeCard.astro";

const recipes = await getCollection('recipes');

// Sort recipes by date (newest first)
const recipesByDate = [...recipes].sort((a, b) => {
  const dateA = new Date(b.data.date || b.data.postDate || new Date());
  const dateB = new Date(a.data.date || a.data.postDate || new Date());
  return dateA - dateB;
});

// Extract all unique courses
// const allCourses = [...new Set(recipes.map(recipe => recipe.data.course).filter(Boolean))];
const allCourses = [...new Set(
  recipes
    .map(recipe => recipe.data.course) // Get all course data
    .filter(Boolean) // Remove null/undefined values
    .flat() // Flatten the array in case course is nested
)];
// Extract all unique cuisines
const allCuisines = [...new Set(
  recipes.flatMap(recipe => {
    if (!recipe.data.cuisine) return [];
    return Array.isArray(recipe.data.cuisine)
      ? recipe.data.cuisine
      : [recipe.data.cuisine];
  }).filter(Boolean)
)];


// Group recipes by course
// Group recipes by course
const recipesByCourse = {};
allCourses.forEach(course => {
  recipesByCourse[course] = recipes.filter(r =>
    Array.isArray(r.data.course) ? r.data.course.includes(course) : r.data.course === course
  );
});

// Group recipes by cuisine
const recipesByCuisine = recipes.reduce((acc, recipe) => {
  if (!recipe.data.cuisine) return acc;

  // Ensure cuisine is an array
  const cuisines = Array.isArray(recipe.data.cuisine)
    ? recipe.data.cuisine
    : [recipe.data.cuisine].filter(Boolean);

  cuisines.forEach((cuisine) => {
    if (!cuisine) return;
    if (!acc[cuisine]) {
      acc[cuisine] = [];
    }
    acc[cuisine].push(recipe);
  });

  return acc;
}, {});
---

<IndexPageLayout title="Recipes" description="What is cooking?" subTitle="tcheiner recipes">
  <section>
    <h2>What I am cooking today</h2>

    <!-- Filter tags section -->
    <div class="mb-6">
      <div class="mb-2">
        <h3 class="text-lg font-medium mb-1">Filter by Course:</h3>
        <div class="flex flex-wrap gap-2" id="course-tags">
          {allCourses.map(course => (
            <button
              class="px-3 py-1 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-primary/20 text-sm filter-tag"
              data-type="course"
              data-value={course}
            >
              {course}
            </button>
          ))}
        </div>
      </div>

      <div class="mb-2">
        <h3 class="text-lg font-medium mb-1">Filter by Cuisine:</h3>
        <div class="flex flex-wrap gap-2" id="cuisine-tags">
          {allCuisines.map(cuisine => (
            <button
              class="px-3 py-1 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-primary/20 text-sm filter-tag"
              data-type="cuisine"
              data-value={cuisine}
            >
              {cuisine}
            </button>
          ))}
        </div>
      </div>

      <div class="mt-3">
        <button
          id="clear-filters"
          class="px-3 py-1 rounded-full bg-red-200 dark:bg-red-800 hover:bg-red-300 dark:hover:bg-red-700 text-sm hidden"
        >
          Clear Filters
        </button>
      </div>
    </div>

    <div id="recipe-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
      {recipesByDate.map((recipe) => {
        const courseTag = recipe.data.course || '';
        const cuisineTags = Array.isArray(recipe.data.cuisine)
          ? recipe.data.cuisine.join(' ')
          : (recipe.data.cuisine || '');

        return (
          <div
            class="recipe-card"
            data-course={courseTag}
            data-cuisine={cuisineTags}
          >
            <RecipeCard
                key={recipe.data.title}
                href={'/recipes/' + recipe.slug}
                heading={recipe.data.title}
                imagePath={recipe.data.image?.url}
                altText={recipe.data.title}
                postDate={recipe.data.postDate}
                sourceUrl={recipe.data.sourceUrl}
             />
          </div>
        );
      })}
    </div>

    <div id="no-results" class="hidden text-center py-8">
      <p class="text-lg">No recipes match the selected filters.</p>
    </div>
  </section>
</IndexPageLayout>

<script>
  function initializeFilters() {
    const filterTags = document.querySelectorAll('.filter-tag');
    const recipeCards = document.querySelectorAll('.recipe-card');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const noResultsMsg = document.getElementById('no-results');

    let activeFilters = {
      course: [],
      cuisine: []
    };

    // Function to update recipe visibility based on active filters
    function updateRecipeVisibility() {
      let visibleCount = 0;

      recipeCards.forEach(card => {
        const cardCourse = card.getAttribute('data-course');
        const cardCuisine = card.getAttribute('data-cuisine');

        // If no filters are active, show all cards
        if (activeFilters.course.length === 0 && activeFilters.cuisine.length === 0) {
          card.classList.remove('hidden');
          visibleCount++;
          return;
        }

        // Check if card matches course filter (if any course filters are active)
        const matchesCourse = activeFilters.course.length === 0 ||
                             activeFilters.course.includes(cardCourse);

        // Check if card matches cuisine filter (if any cuisine filters are active)
        const matchesCuisine = activeFilters.cuisine.length === 0 ||
                              activeFilters.cuisine.some(cuisine => cardCuisine.includes(cuisine));

        // Show card only if it matches both filters
        if (matchesCourse && matchesCuisine) {
          card.classList.remove('hidden');
          visibleCount++;
        } else {
          card.classList.add('hidden');
        }
      });

      // Show/hide no results message
      if (visibleCount === 0) {
        noResultsMsg.classList.remove('hidden');
      } else {
        noResultsMsg.classList.add('hidden');
      }

      // Show/hide clear filters button
      if (activeFilters.course.length > 0 || activeFilters.cuisine.length > 0) {
        clearFiltersBtn.classList.remove('hidden');
      } else {
        clearFiltersBtn.classList.add('hidden');
      }
    }

    // Add click event to filter tags
    filterTags.forEach(tag => {
      tag.addEventListener('click', () => {
        const type = tag.getAttribute('data-type');
        const value = tag.getAttribute('data-value');

        // Toggle active state
        if (activeFilters[type].includes(value)) {
          // Remove filter
          activeFilters[type] = activeFilters[type].filter(v => v !== value);
          tag.classList.remove('bg-primary', 'text-primary-foreground');
          tag.classList.add('bg-gray-200', 'dark:bg-gray-700');
        } else {
          // Add filter
          activeFilters[type].push(value);
          tag.classList.remove('bg-gray-200', 'dark:bg-gray-700');
          tag.classList.add('bg-primary', 'text-primary-foreground');
        }

        updateRecipeVisibility();
      });
    });

    // Add click event to clear filters button
    clearFiltersBtn.addEventListener('click', () => {
      activeFilters = {
        course: [],
        cuisine: []
      };

      // Reset all tag styles
      filterTags.forEach(tag => {
        tag.classList.remove('bg-primary', 'text-primary-foreground');
        tag.classList.add('bg-gray-200', 'dark:bg-gray-700');
      });

      updateRecipeVisibility();
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeFilters);

  // Also initialize for Astro view transitions
  document.addEventListener('astro:page-load', initializeFilters);
</script>


---
import { getCollection } from 'astro:content';
import IndexPageLayout from "../../layouts/IndexPageLayout.astro";
import RecipeCard from "../../components/RecipeCard.astro";

const recipes = await getCollection('recipes');

// Sort recipes by date (newest first)
const recipesByDate = [...recipes].sort((a, b) => {
  const dateA = new Date(b.data.date || b.data.postDate || new Date());
  const dateB = new Date(a.data.date || a.data.postDate || new Date());
  return dateA - dateB;
});

// Group recipes by course
const recipesByCourse = {
  breakfast: recipes.filter((r) => r.data.course === 'breakfast'),
  lunch: recipes.filter((r) => r.data.course === 'lunch'),
  dinner: recipes.filter((r) => r.data.course === 'dinner'),
  desserts: recipes.filter((r) => r.data.course === 'desserts'),
  snacks: recipes.filter((r) => r.data.course === 'snacks'),
  starter: recipes.filter((r) => r.data.course === 'starter'),
};

const recipesByCuisine = recipes.reduce((acc, recipe) => {
  // Ensure `recipe.data.cuisine` is an array
  const cuisines = Array.isArray(recipe.data.cuisine) ? recipe.data.cuisine : [recipe.data.cuisine].filter(Boolean);

  cuisines.forEach((cuisine) => {
    if (!cuisine) return;
    if (!acc[cuisine]) {
      acc[cuisine] = [];
    }
    acc[cuisine].push(recipe);
  });

  return acc;
}, {});
---

<IndexPageLayout title="Recipes" description="What is cooking?" subTitle="tcheiner recipes">
  <section>
    <h2>What I am cooking today</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
      {recipesByDate.map((recipe) => {
        return (
          <RecipeCard
              key={recipe.data.title}
              href={'/recipes/' + recipe.slug}
              heading={recipe.data.title}
              imagePath={recipe.data.image?.url}
              altText={recipe.data.title}
              postDate={recipe.data.postDate}
              sourceUrl={recipe.data.sourceUrl}
           />
        );
      })}
    </div>
  </section>
</IndexPageLayout>

